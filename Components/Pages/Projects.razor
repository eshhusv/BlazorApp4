@page "/projects"
@using BlazorApp4.Models
@inject IHttpClientFactory ClientFactory;
@rendermode RenderMode.InteractiveServer

<PageTitle>Projects</PageTitle>

<h1>Projects</h1>

<div class="text-center p-2">
    <h1 class="text-center">Tasks list</h1>
    <table class="table table-bordered table-striped table-sm">
        <thead>
            <tr>
                <th>Task Name</th>
                <th>Customer</th>
            </tr>
        </thead>
        <tbody>
            @foreach (CustomersNames c in list)
            {
                <tr>
                    <td>@c.TaskName</td>
                    <td>@c.Customer</td>
                    <td>
                        <a class="btn btn-primary" @onclick="()=>Edit(c)">Изменить</a>
                        <a class="btn btn-primary" @onclick="@(async ()=>await Delete(c.TaskId))">Удалить</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div>
    <EditForm Model="@assignment" OnSubmit="Submit">
        <p>
            Name: <br />
            <InputText class="form-control" @bind-Value="assignment.TaskName" />
        </p>
        <p>
            Customer: <br />
            <InputSelect class="form-control" @bind-Value="assignment.TaskNavigationCustomerId">
                <option selected value="">None</option>
                @foreach (var customer in CustomersList)
                {
                    <option value="@customer.CustomerId">
                        @(customer.Surname)
                        @(customer.Name)
                    </option>
                }
            </InputSelect>
        </p>

        <button class="btn btn-primary" type="submit">Отправить</button>
        <button class="btn btn-primary" type="reset" onclick="Reset">Очистить</button>
    </EditForm>
</div>

@code {
    List<TaskSercive> assignments = [];
    public CustomerService[] CustomersList { get; set; } = [];
    TaskSercive assignment = new();
    HttpClient httpClient = new HttpClient();
    List<CustomersNames> list = [];

    void Edit(CustomersNames c)
    {
        assignment.TaskId = c.TaskId;
        assignment.TaskName = c.TaskName;
        assignment.TaskNavigationCustomerId = c.TaskNavigationCustomerId;
    }
    protected override async Task OnInitializedAsync()
    {
        httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("http://localhost:5102/api/assignment");
        await LoadData();
        List<CustomerService>? list = await httpClient.GetFromJsonAsync<List<CustomerService>>(new Uri("http://localhost:5102/api/customer"));
        CustomersList = list.ToArray();
    }
    async Task LoadData()
    {
        assignments = await httpClient.GetFromJsonAsync<List<TaskSercive>>(httpClient.BaseAddress) ?? assignments;
        list.Clear();
        for (int i = 0; i < assignments.Count; i++)
        {
            CustomerService? s = await httpClient.GetFromJsonAsync<CustomerService>
                    (new Uri("http://localhost:5102/api/customer/" + assignments[i].TaskNavigationCustomerId));
            list.Add(new CustomersNames
                {
                    TaskId = assignments[i].TaskId,
                    TaskName = assignments[i].TaskName,
                    TaskNavigationCustomerId = assignments[i].TaskNavigationCustomerId,
                    Customer = s.Surname + " " + s.Name
                });
        }
    }
    async Task Submit()
    {
        if (assignment.TaskId == 0)
            await httpClient.PostAsJsonAsync(httpClient.BaseAddress, assignment);
        else
            await httpClient.PutAsJsonAsync(httpClient.BaseAddress, assignment);
        assignment.TaskId = 0;
        assignment.TaskName = "";
        await LoadData();
    }
    void Reset()
    {
        assignment.TaskId = 0;
    }
    async Task Update()
    {
        await httpClient.PutAsJsonAsync(httpClient.BaseAddress, assignment);
        await LoadData();
    }
    async Task Delete(int id)
    {
        await httpClient.DeleteAsync($"{httpClient.BaseAddress}/{id}");
        await LoadData();
    }

    class CustomersNames
    {
        public int TaskId { get; set; }
        public string? TaskName { get; set; }
        public int TaskNavigationCustomerId { get; set; }
        public string? Customer { get; set; }
    }
}
